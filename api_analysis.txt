# GraphQL API Endpoints Analysis

The following API endpoints have been analyzed and documented:

1. GET /graphql (http example) - User query API
   - File: /Users/jiangjiahao/Documents/GitHub/graphql/elasticdash/http_graphql_api.md
   - Simple user query API that retrieves user information by ID from a JSON file

2. POST /graphql (http-post example) - Todo list API 
   - File: /Users/jiangjiahao/Documents/GitHub/graphql/elasticdash/http_post_graphql_api.md
   - Todo list API that supports reading, creating, and updating todos

3. GET /graphql (httpdynamic example) - Dynamic User API
   - File: /Users/jiangjiahao/Documents/GitHub/graphql/elasticdash/httpdynamic_graphql_api.md
   - User query API with dynamic schema that can be reloaded by sending SIGUSR1 signal

4. GET /graphql (todo example) - Todo list API
   - File: /Users/jiangjiahao/Documents/GitHub/graphql/elasticdash/todo_graphql_api.md
   - Todo list API with ability to get individual todos, create new todos, update todos, and list all todos

5. GET /graphql (star-wars example) - Star Wars API
   - File: /Users/jiangjiahao/Documents/GitHub/graphql/elasticdash/star_wars_graphql_api.md
   - Star Wars API that exposes data from the Star Wars universe (uses testutil.StarWarsSchema)

6. GET /product (crud example) - Product CRUD API
   - File: /Users/jiangjiahao/Documents/GitHub/graphql/elasticdash/crud_product_api.md
   - Full CRUD API for products with create, read, update, and delete operations

7. GET /graphql (context example) - Context Demonstration API
   - File: /Users/jiangjiahao/Documents/GitHub/graphql/elasticdash/context_graphql_api.md
   - Demonstrates how to use context to pass user information to resolvers

Each file contains detailed information about:
- Implementation code snippets
- Input format
- Output format
- Sample curl commands
- Expected JSON responses