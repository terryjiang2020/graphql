# GET /graphql

## Implementation

### Route Definition
File: `/examples/context/main.go` (Line 60)
```go
http.HandleFunc("/graphql", graphqlHandler)
```

### Handler Function
File: `/examples/context/main.go` (Lines 42-57)
```go
func graphqlHandler(w http.ResponseWriter, r *http.Request) {
    user := struct {
        ID   int    `json:"id"`
        Name string `json:"name"`
    }{1, "cool user"}
    result := graphql.Do(graphql.Params{
        Schema:        Schema,
        RequestString: r.URL.Query().Get("query"),
        Context:       context.WithValue(context.Background(), "currentUser", user),
    })
    if len(result.Errors) > 0 {
        log.Printf("wrong result, unexpected errors: %v", result.Errors)
        return
    }
    json.NewEncoder(w).Encode(result)
}
```

### Schema and Type Definitions
File: `/examples/context/main.go` (Lines 15-40, 66-74)
```go
var userType = graphql.NewObject(
    graphql.ObjectConfig{
        Name: "User",
        Fields: graphql.Fields{
            "id": &graphql.Field{
                Type: graphql.String,
            },
            "name": &graphql.Field{
                Type: graphql.String,
            },
        },
    },
)

var queryType = graphql.NewObject(
    graphql.ObjectConfig{
        Name: "Query",
        Fields: graphql.Fields{
            "me": &graphql.Field{
                Type: userType,
                Resolve: func(p graphql.ResolveParams) (interface{}, error) {
                    return p.Context.Value("currentUser"), nil
                },
            },
        },
    })

func init() {
    s, err := graphql.NewSchema(graphql.SchemaConfig{
        Query: queryType,
    })
    if err != nil {
        log.Fatalf("failed to create schema, error: %v", err)
    }
    Schema = s
}
```

## Input Format

### URL Parameters
None

### Query Parameters
- `query` (string, required): The GraphQL query to execute

### Request Body
None for GET requests

### Data Types
- `query`: String containing a valid GraphQL query

## Output Format

### Response Structure
JSON object with the following fields:
- `data`: Object containing the requested data fields
- `errors`: Array of error objects (only present if errors occurred)

### Status Codes
- 200 OK: Successful request (even if there are GraphQL errors, they will be in the response body)

### Data Types
- `data`: JSON object with fields matching the GraphQL query structure
- `errors`: Array of error objects with message, location, and path information

### Error Response Format
```json
{
  "errors": [
    {
      "message": "Error message",
      "locations": [{"line": x, "column": y}],
      "path": ["field", "path"]
    }
  ]
}
```

## Sample Input

```bash
curl -g 'http://localhost:8080/graphql?query={me{id,name}}'
```

## Sample Output

```json
{
  "data": {
    "me": {
      "id": "1",
      "name": "cool user"
    }
  }
}
```